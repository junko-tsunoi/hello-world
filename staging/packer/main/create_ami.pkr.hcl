variable "ami_name" {
  type    = string
  default = "boys-mv-crop-stg"
}

variable "aws_profile" {
  type    = string
  default = "development"
}

variable "environment" {
  type    = string
  default = "stg"
}

variable "owner" {
  type    = string
  default = "PresidentRoom"
}

variable "region" {
  type    = string
  default = "ap-northeast-1"
}

variable "ami_filter_name" {
  type    = string
  default = "amzn2-ami-hvm-*-x86_64-gp2"
}

#locals { timestamp = regex_replace(timestamp(), "[- TZ:]", "") }

source "amazon-ebs" "autogenerated_1" {
  ami_name      = "${var.ami_name}-{{isotime \"200601020304\"}}"
  #ami_name      = var.ami_name
  instance_type = "t3.micro"
  source_ami_filter {
    filters {
      virtualization-type = "hvm"
      name                = "${var.ami_filter_name}*"
      root-device-type    = "ebs"
    }
    owners = ["137112412989"]
    most_recent = true
  }
  launch_block_device_mappings {
    delete_on_termination = "true"
    device_name           = "/dev/xvda"
    volume_size           = "16"
    volume_type           = "gp3"
  }
  ssh_username = "ec2-user"
  tags {
    Created = "packer"
    Env     = var.environment
    Name    = var.ami_name
    Owner   = var.owner
    Version = "{{isotime \"200601020304\"}}"
    BaseAMIId = "{{ .SourceAMI }}"
    BaseAMIName = "{{ .SourceAMIName }}"
  }
  user_data_file = "./templates/user_data.sh"
}

build {
  sources = ["source.amazon-ebs.autogenerated_1"]

  provisioner "shell" {
    inline = ["sudo amazon-linux-extras install ansible2 -y"]
  }
  provisioner "ansible-local" {
    inventory_file = "./ansible-playbook/hosts"
    playbook_dir   = "./ansible-playbook/"
    playbook_file  = "./ansible-playbook/site.yml"
  }
}
