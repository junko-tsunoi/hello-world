locals {
  aws_managed_rules = [
    { priority = 1, name = "AWSManagedRulesAdminProtectionRuleSet" },
    { priority = 2, name = "AWSManagedRulesCommonRuleSet" },
    { priority = 3, name = "AWSManagedRulesKnownBadInputsRuleSet" },
    { priority = 4, name = "AWSManagedRulesSQLiRuleSet" },
  ]
  aws_managed_count_rules = [
    { priority = 7, name = "AWSManagedRulesAnonymousIpList" },
    { priority = 8, name = "AWSManagedRulesAmazonIpReputationList" }
  ]
  scope = "CLOUDFRONT"
}

# 接続を拒否するIPアドレス一覧
resource "aws_wafv2_ip_set" "deny_list" {
  ip_address_version = "IPV4"
  name               = "${local.Project}${local.Env}DenyList"
  scope              = local.scope
  addresses          = []
  tags = {
    Name = "${local.Project}${local.Env}DenyList"
  }
}

# 接続を許可するIPアドレス一覧
resource "aws_wafv2_ip_set" "allow_list" {
  ip_address_version = "IPV4"
  name               = "${local.Project}${local.Env}AllowList"
  scope              = local.scope
  addresses          = []
  tags = {
    Name = "${local.Project}${local.Env}AllowList"
  }
}

resource "aws_wafv2_web_acl" "acl" {
  name  = "${local.Project}${local.Env}WebAcl"
  scope = local.scope
  default_action {
    allow {}
  }

  visibility_config {
    cloudwatch_metrics_enabled = true
    metric_name                = "${local.Project}${local.Env}WebAcl"
    sampled_requests_enabled   = true
  }

  # AWS Managed Rule
  dynamic "rule" {
    for_each = local.aws_managed_rules
    content {
      name     = "AWS-${rule.value.name}"
      priority = rule.value.priority
      statement {
        managed_rule_group_statement {
          name        = rule.value.name
          vendor_name = "AWS"
        }
      }
      override_action {
        none {}
      }
      visibility_config {
        cloudwatch_metrics_enabled = true
        sampled_requests_enabled   = true
        metric_name                = "AWS-${rule.value.name}"
      }
    }
  }

  # AWS Maneged Rule (Count)
  dynamic "rule" {
    for_each = local.aws_managed_count_rules
    content {
      name     = "AWS-${rule.value.name}"
      priority = rule.value.priority
      statement {
        managed_rule_group_statement {
          name        = rule.value.name
          vendor_name = "AWS"
        }
      }
      override_action {
        count {}
      }
      visibility_config {
        cloudwatch_metrics_enabled = true
        sampled_requests_enabled   = true
        metric_name                = "AWS-${rule.value.name}"
      }
    }
  }

  # Route53 Health Check
  rule {
    name     = "Amazon-Route53-Health-Check-Service"
    priority = 0
    action {
      allow {}
    }
    statement {
      byte_match_statement {
        field_to_match {
          single_header {
            name = "user-agent"
          }
        }
        positional_constraint = "CONTAINS"
        search_string         = "Amazon-Route53-Health-Check-Service"
        text_transformation {
          priority = 0
          type     = "NONE"
        }
      }
    }
    visibility_config {
      cloudwatch_metrics_enabled = false
      sampled_requests_enabled   = false
      metric_name                = "Amazon-Route53-Health-Check-Service"
    }
  }

  # Deny IP Sets
  rule {
    name     = "${local.Project}${local.Env}IPDenyRuleSet"
    priority = 5
    action {
      block {}
    }
    statement {
      ip_set_reference_statement {
        arn = aws_wafv2_ip_set.deny_list.arn
      }
    }
    visibility_config {
      cloudwatch_metrics_enabled = true
      sampled_requests_enabled   = true
      metric_name                = "${local.Project}${local.Env}IPDenyRuleSet"
    }
  }


  # Allow IP Sets
  rule {
    name     = "${local.Project}${local.Env}IPAllowRuleSet"
    priority = 6
    action {
      allow {}
    }
    statement {
      ip_set_reference_statement {
        arn = aws_wafv2_ip_set.allow_list.arn
      }
    }
    visibility_config {
      cloudwatch_metrics_enabled = true
      sampled_requests_enabled   = false
      metric_name                = "${local.Project}${local.Env}IPAllowRuleSet"
    }
  }

  tags = {
    Name = "${local.Project}${local.Env}WebAcl"
  }
}

output "wafv2_acl_arn" { value = aws_wafv2_web_acl.acl.arn }

resource "aws_wafv2_web_acl_logging_configuration" "acl" {
  log_destination_configs = [ aws_kinesis_firehose_delivery_stream.waf.arn ]
  resource_arn            = aws_wafv2_web_acl.acl.arn
}
